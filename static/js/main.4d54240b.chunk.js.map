{"version":3,"sources":["components/WeatherBox.js","components/LocationBox.js","components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["WeatherBox","weatherTemp","weatherMain","className","Math","round","LocationBox","weatherName","weatherCountry","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateGenerator","Date","SearchBox","handleOnPress","handleOnChange","queryValue","type","placeholder","onChange","value","onKeyPress","api","App","useState","query","setQuery","weather","setWeather","main","temp","e","target","key","fetch","then","res","json","result","console","log","name","sys","country","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0KAWeA,EATI,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACjC,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,QAAQC,KAAKC,MAAMJ,GAAlC,SACA,yBAAKE,UAAU,WAAWD,KCwCjBI,EAbK,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAClC,OACE,oCACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,YACZI,EADH,KACkBC,GAElB,yBAAKL,UAAU,QAtCD,SAACM,GACrB,IAuBIC,EATO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAEaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GAUNE,CAAc,IAAIC,UCvBlCC,EAfG,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAClD,OACE,yBAAKpB,UAAU,cACb,2BACEqB,KAAK,OACLrB,UAAU,aACVsB,YAAY,YACZC,SAAUJ,EACVK,MAAOJ,EACPK,WAAYP,MCPdQ,EACC,mCADDA,EAEE,2CAoFOC,MAjFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAsDb,OACE,yBAAKhC,UAtCoB,oBAAhB+B,EAAQE,MACfF,EAAQE,KAAKC,KAAO,IACQ,SAA5BH,EAAQA,QAAQ,GAAGE,KAEZ,UAGgB,oBAAhBF,EAAQE,MACfF,EAAQE,KAAKC,KAAO,IACQ,SAA5BH,EAAQA,QAAQ,GAAGE,KAEZ,WAGgB,oBAAhBF,EAAQE,MACfF,EAAQE,KAAKC,KAAO,GACQ,SAA5BH,EAAQA,QAAQ,GAAGE,KAEZ,WAGgB,oBAAhBF,EAAQE,MACfF,EAAQE,KAAKC,KAAO,GACQ,SAA5BH,EAAQA,QAAQ,GAAGE,KAEZ,WAIgB,oBAAhBF,EAAQE,MACa,SAA5BF,EAAQA,QAAQ,GAAGE,KAEZ,WAEA,OAKP,8BACE,kBAAC,EAAD,CACEd,eAAgB,SAACgB,GAAD,OAAOL,EAASK,EAAEC,OAAOZ,QACzCN,cAvDO,SAACiB,GACA,UAAVA,EAAEE,KACJC,MAAM,GAAD,OAAIZ,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDa,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLV,EAAWU,GACXZ,EAAS,IACTa,QAAQC,IAAIF,OAiDZlB,MAAOK,IAEe,oBAAhBE,EAAQE,KACd,6BACE,kBAAC,EAAD,CACE7B,YAAa2B,EAAQc,KACrBxC,eAAgB0B,EAAQe,IAAIC,UAE9B,kBAAC,EAAD,CACEjD,YAAaiC,EAAQE,KAAKC,KAC1BnC,YAAagC,EAAQA,QAAQ,GAAGE,QAIpC,MCvEUe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.4d54240b.chunk.js","sourcesContent":["import React from 'react'\n\nconst WeatherBox = ({ weatherTemp, weatherMain }) => {\n  return (\n    <div className=\"weather-box\">\n      <div className=\"temp\">{Math.round(weatherTemp)}&#176;C</div>\n      <div className=\"weather\">{weatherMain}</div>\n    </div>\n  )\n}\n\nexport default WeatherBox\n","import React from 'react'\n\nconst dateGenerator = (d) => {\n  let months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ]\n  let days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ]\n  let day = days[d.getDay()]\n  let date = d.getDate()\n  let month = months[d.getMonth()]\n  let year = d.getFullYear()\n  return `${day}, ${date} ${month} ${year}`\n}\n\nconst LocationBox = ({ weatherName, weatherCountry }) => {\n  return (\n    <>\n      <div className=\"location-box\">\n        <div className=\"location\">\n          {weatherName}, {weatherCountry}\n        </div>\n        <div className=\"date\">{dateGenerator(new Date())}</div>\n      </div>\n    </>\n  )\n}\n\nexport default LocationBox\n","import React from 'react'\n\nconst SearchBox = ({ handleOnPress, handleOnChange, queryValue }) => {\n  return (\n    <div className=\"search-box\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search...\"\n        onChange={handleOnChange}\n        value={queryValue}\n        onKeyPress={handleOnPress}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { useState } from 'react'\nimport WeatherBox from './components/WeatherBox'\nimport LocationBox from './components/LocationBox'\nimport SearchBox from './components/SearchBox'\nconst api = {\n  key: '3d489f7ac00fe3d4d4f58ae16fa86e48',\n  base: 'https://api.openweathermap.org/data/2.5/',\n}\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n\n  const search = (e) => {\n    if (e.key === 'Enter') {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result)\n          setQuery('')\n          console.log(result)\n        })\n    }\n  }\n  const SwitchImg = () => {\n    if (\n      typeof weather.main != 'undefined' &&\n      weather.main.temp > 26 &&\n      weather.weather[0].main !== 'Rain'\n    ) {\n      return 'app hot'\n    }\n    if (\n      typeof weather.main != 'undefined' &&\n      weather.main.temp > 16 &&\n      weather.weather[0].main !== 'Rain'\n    ) {\n      return 'app warm'\n    }\n    if (\n      typeof weather.main != 'undefined' &&\n      weather.main.temp > 6 &&\n      weather.weather[0].main !== 'Rain'\n    ) {\n      return 'app cold'\n    }\n    if (\n      typeof weather.main != 'undefined' &&\n      weather.main.temp < 6 &&\n      weather.weather[0].main !== 'Rain'\n    ) {\n      return 'app snow'\n    }\n\n    if (\n      typeof weather.main != 'undefined' &&\n      weather.weather[0].main === 'Rain'\n    ) {\n      return 'app rain'\n    } else {\n      return 'app'\n    }\n  }\n  return (\n    <div className={SwitchImg()}>\n      <main>\n        <SearchBox\n          handleOnChange={(e) => setQuery(e.target.value)}\n          handleOnPress={search}\n          value={query}\n        />\n        {typeof weather.main != 'undefined' ? (\n          <div>\n            <LocationBox\n              weatherName={weather.name}\n              weatherCountry={weather.sys.country}\n            />\n            <WeatherBox\n              weatherTemp={weather.main.temp}\n              weatherMain={weather.weather[0].main}\n            />\n          </div>\n        ) : (\n          ''\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}